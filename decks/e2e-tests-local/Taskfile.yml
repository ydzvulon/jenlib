# https://taskfile.dev

version: '3'
includes:
  tests: 
    taskfile: e2e.test.tasks.yml
    dir: .
env: 
  jenconda_fulltag: |-
    $(yq read ../jenconda-dimg/__build_info/docker-build/jenconda.build.over.info.yml fulltag)

vars:
  _repo_root_: "$(realpath ../..)"
  jenkins_url: http://localhost:12080

tasks:
  default:
    cmds:
      - task -l
    silent: true

  info:
    desc: Some Info
    cmds:
      - echo "Reach Jenkins. {{.jenkins_url}}"
      - echo "Reach DevLab. http://localhost:12088"
    silent: true

  build:
    desc: _
    cmds:
      - task: ci-flow

  stop:
    desc: _
    cmds:
      - docker-compose down || true

  remove:
    desc: _
    cmds:
      - task: stop
      - docker-compose rm || true

  run:
    desc: _
    cmds:
      - docker-compose up -d
      - task: wait-for-host-up
        vars:
          host: '{{.jenkins_url}}'
  rerun:
    desc: _
    cmds:
      - task: stop
      - task: remove
      - task: run
      - task: info

  ci-flow:
    desc: _
    cmds:
      - task: stop
      - task: resolve-dimgs
      - task: test-all-clean
      - task: stop
  
  test-all-clean:
    desc: _
    cmds:
      - task: rerun
      - task: tests:test-all

  resolve-dimgs:
    desc: _
    deps:
      - task: build-jenconda
      - task: build-dev-editor
    cmds:
      - echo "resolved jenconda,dev-editor"

  build-jenconda: |-
    task build \
    -d {{._repo_root_}}/decks/jenconda-dimg
      
  build-dev-editor: |-
    task build \
    -d {{._repo_root_}}/decks/dev-editor-local 
      

# 200
# === aux tasks ===
  wait-for-host-up:
    desc: try to reach host untill timeout
    vars:
      timeout: '{{ default "640" .timeout }}'
    cmds:
      - |-
        python3 -c '

        import urllib.request
        import urllib.error
        import time

        def check_response():
          req = urllib.request.Request("{{.host}}")
          try:
            urllib.request.urlopen(req)
            return True
          except urllib.error.HTTPError as e:
            print(e.code)
          except Exception as e:
            print(e)
          return False
        
        def wait_until(somepredicate, timeout, period=1.25, *args, **kwargs):
          print(f"staring timeout={timeout}")
          mustend = time.time() + timeout
          while time.time() < mustend:
            if somepredicate(*args, **kwargs): return True
            time.sleep(period)
          return False

        ok = wait_until(check_response, int("{{.timeout}}"))
        if not ok:
          print("false")
          exit(1)
        print("host is back. {{.host}}")
        '
        echo --
