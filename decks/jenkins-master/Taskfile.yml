# https://taskfile.dev

version: "3"

vars:
  GREETING: JenkinsDockers
  jentest_machine: jentest
  DIMAGE: jenconda

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
      - task -l
    silent: true

  docker:build:jenmaster:
    desc: _
    cmds:
      - docker build . -t jenmaster

  docker:build:jenconda:
    desc: _
    deps:
      - docker:build:jenmaster
    vars:
      ts: {sh: date +"%s"}
      vers: '$(cat ../../version/version_prefix.txt)'
      fulltag: '{{.DIMAGE}}:{{.vers}}-{{.ts}}'
    cmds:
      - mkdir -p __build_info/docker-build/jenconda
      - |-
        cat <<EOF > __build_info/docker-build/jenconda/{{.fulltag}}
        kind: docker.build.info
        version: "3"
        vars:
          schema: |-
            dict: str
          spec: |-
            build_id: fdasdf
            git_src: url@commit
            docker_dst: repo:tag
        includes:
          docker-info: ../../_infra/
        EOF
      # - |-
      #   docker build \
      #     -f install.scripts/install-conda-in-docker.Dockerfile  \
      #     -t {{.fulltag}} \
      #     install.scripts
  docker:build:
    desc: _
    deps: [docker:build:jenconda]

  build:
    desc: _
    deps: [docker:build]

  spin:up:bash:
    desc: _
    cmds:
      - docker rm -f {{.DIMAGE}}_lc || true
      - mkdir -p $(realpath ~)/shared/jenkins_c
      - |
        docker run \
        --name {{.DIMAGE}}_lc \
        -d \
        -p 8080:8080 \
        -p 50000:50000 \
        -p 5000:5000 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $(realpath ~)/shared/jenkins_c:/shared/jenkins_c \
        {{.DIMAGE}}

  spin:up:
    desc: _
    cmds:
      - mkdir -p /tmp/GITLAB_HOME
      - chmod 777 /tmp/GITLAB_HOME
      - docker-compose up -d

  spin:down:
    desc: _
    cmds:
      - docker-compose down

  spin:up:dev:
    desc: _
    cmds:
      - docker-compose up -d

  status:
    desc: _
    cmds:
      - docker-compose ps

  docker:run:local:
    desc: _
    cmds:
      - docker rm -f {{.DIMAGE}}
      - mkdir -p $(realpath ~)/shared/jenkins_c
      - |
        docker run \
        --name {{.DIMAGE}}
        -d \
        -p 8080:8080 \
        -p 50000:50000 \
        -p 5000:5000 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $(realpath ~)/shared/jenkins_c:/shared/jenkins_c \
        {{.DIMAGE}}

  docker:run:dev:
    desc: _
    cmds:
      - docker rm -f {{.DIMAGE}}
      - test -d /opt/dockers-data || (sudo mkdir -p /opt/dockers-data && (sudo chmod -R 777 /opt/dockers-data || true))
      - test -d /opt/dockers-data/jenkins_home_dev || (sudo mkdir -p /opt/dockers-data/jenkins_home_dev && (sudo chmod -R 777 /opt/dockers-data/jenkins_home_dev || true))
      - |
        docker run \
        --name {{.DIMAGE}}
        -d \
        -p 8830:8080 \
        -p 58300:50000 \
        -v /opt/dockers-data/jenkins_home_dev:/var/jenkins_home:rw \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v $(realpath ~):/var/userhome:ro \
        -v $(realpath ../..):/var/jenlib_repo:ro \
        jenconda

  docker:run:test:init:
    desc: _
    vars:
      VOLUME_NAME: 
        sh: echo '{{.DIMAGE}}'
      DEMONIZE: -d
    cmds:
      # - docker volume rm {{.VOLUME_NAME}}|| true
      - docker rm -f jenconda
      - docker volume create {{.VOLUME_NAME}} || true
      # -d \
      - |
        docker run \
        --name jenconda
        -d \
        -p 18808:8080 \
        -p 18500:50000 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v {{.VOLUME_NAME}}:/var/jenkins_home:rw \
        -v $(realpath ~):/var/userhome:ro \
        -v $(realpath ../..):/var/jenlib_repo:ro \
        jenconda
      - ./wait-for-it.sh localhost:18808
      - echo access "http://localhost:18808"

  docker:run:test:flow:
    desc: _
    cmds:
      - ./wait-for-it.sh localhost:18808

  docker:run:test:full:
    desc: _
    cmds:
      - task docker:run:test:init
      - task docker:run:test:flow

  ci-flow:
    desc: _
    cmds:
      - task docker:build
      - task docker:run:test:full

  docker:clean:data:
    desc: _
    cmds:
      - rm -rf ~/jenkins_home/* ~/jenkins_home/.*

  install:jcli:
    # desc: _
    cmds:
      - which brew && brew install jcli || true
      - |
        which brew \
        || curl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv \
        && sudo mv jcli /usr/local/bin/

  shapshot:update:
    desc: _
    cmds:
      - jcli plugin list > install.snapshots/snapshot_2020-05-20--00-40-45/jcli_plugin_list.org.tsv

  dm:sync:
    desc: _
    cmds:
      - |
        docker-machine scp -r . {{.jentest_machine}}:/home/docker/_jm

  dm:ssh:
    desc: _
    cmds:
      - |
        docker-machine ssh {{.jentest_machine}}

  show-plugins-from:
    desc: _
    vars:
      target: install.snapshots/snapshot_2020-05-20--00-40-45
    cmds:
      # - |
      #   cat "{{.target}}/jcli_plugin_list.org.tsv" \
      #   | python -c "
      #   import fileinput
      #   for line in fileinput.input():print(':'.join(line.split()[:2]))
      #   "
      - |
        cat "{{.target}}/jcli_plugin_list.org.tsv" \
        | python -c "import fileinput; \
        set(map( \
          lambda x: print(':'.join(x.split()[:2])), \
          list(fileinput.input())[1:])) \
        "
    silent: yes

  gen-plugins-from:
    desc: _
    cmds:
      - task show-plugins-from > plugins.txt 2>&1

      # - cat "{{.target}}/jcli_plugin_list.org.tsv" | sed 's/ false/blas/'
      # - cat "{{.target}}/jcli_plugin_list.org.tsv" | python -c "print(x.split()"

  dm:list:
    desc: _
    cmds:
      - docker-machine ls

  tpa:
    desc: _
    cmds:
      - curl http://192.168.99.100:8880/
      - curl http://192.168.99.100:8880/ | grep 'Please wait while Jenkins is getting ready to work'


  get-swarm-agent:
    desc: _
    cmds:
      - mkdir -p /tmp
      - cd /tmp && wget https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/3.23/swarm-client-3.23.jar
      - mkdir -p /data/tools/
      - mv /tmp/swarm-client-3.23.jar /data/tools/
      
  run-jenw-on-host:
    desc: running jenkins on host
    cmds:
      - |
        java -jar /data/tools/swarm-client-3.23.jar \
        -master http://blade2:8080 \
        -labels 'sw-agent' \
        -fsroot '.' \
        -username jenworker \
        -password jenpassword
