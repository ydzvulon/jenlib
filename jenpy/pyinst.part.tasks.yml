#!/usr/local/bin/task --taskfile
# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, World!

  repo_root_dir: "$(yq read _version/paths_config.yml repo_root_dir)"
  proj_root_dir: "$(yq read _version/paths_config.yml proj_root_dir)"
  proj_deps_dir: "$(yq read _version/paths_config.yml proj_deps_dir)"

  MX_VERSION_PREFIX__TXT: "{{.repo_root_dir}}/version/version_prefix.txt"
  MX_PROJECT_PREFIX__TXT: "{{.repo_root_dir}}/version/project_prefix.txt"
  MX_PROJECT_PREFIX: "$(cat ../version/project_prefix.txt)"
  VENV_NAME: "{{.MX_PROJECT_PREFIX}}-pyinst37"

  DEPS_DIR: "{{.repo_root_dir}}/{{.proj_deps_dir}}"

  DEPS_CONDA_BASE: "$(cat {{.DEPS_DIR}}/conda.base.deps.list.txt |  tr '\n' ' ')"
  DEPS_CONDA_RUN: "$(cat {{.DEPS_DIR}}/conda.run.deps.list.txt |  tr '\n' ' ')"
  # yq read - {{.YQ_PATH}} --tojson | jq '.[]' | tr '\n' ' '
  # DEPS_PIP:  "$(cat {{.DEPS_DIR}}/pip.deps.list.txt |  tr '\n' ' ')"
  DEPS_PIP_PATH: "{{.DEPS_DIR}}/pip.deps.list.txt"

  tools_json: "$(yq read {{.repo_root_dir}}/version/tools_settings.yml tool --tojson)"
  conda_pm: "$(echo '{{.tools_json}}' | jq '.conda_pm' -r)"
  conda_ac: "$(echo '{{.tools_json}}' | jq '.conda_ac' -r)"

  distpath: __localbuild__/pyinstaller/dist
  workpath: __localbuild__/pyinstaller/build
  exe_name: "$(yq read _version/pyinstaller_config.json exe_name)"

  # venv_run: "{"

expected:
  MX_VERSION_PREFIX__TXT: path
  DEPS_DIR: path

tasks:

  default:
    cmds:
      - task: info

  info:
    desc: show info
    cmds:
      - echo "DEPS_CONDA_BASE={{.DEPS_CONDA_BASE}}"
      - echo "DEPS_PIP={{.DEPS_PIP}}"
      - echo "tools_json={{.tools_json}}"
      - echo "conda_pm={{.conda_pm}}"
      - echo for activate.
      - echo conda activate {{.VENV_NAME}}
    silent: true

  venv-create:
    desc: _
    cmds:
      - "{{.conda_pm}} create -y -n  {{.VENV_NAME}}"
      - task: venv-update-conda-base
    status:
      - "{{.conda_pm}} run -n {{.VENV_NAME}} conda"

  venv-update-conda-base:
    cmds:
      - "{{.conda_pm}} install -y -n {{.VENV_NAME}} {{.DEPS_CONDA_BASE}}"
    # status:
    #   - conda_pm list -n {{.VENV_NAME}}

  venv-update-all:
    desc: _
    cmds:
      - task: venv-update-conda-run
      - task: venv-update-pyinstaller-pydantic
      - task: venv-update-pip

  venv-ensure:
    desc: make sure venv is present
    cmds:
      - task: venv-create
      - task: venv-update-all


  venv-update-conda-run:
    cmds:
      - "{{.conda_pm}} install -y -n {{.VENV_NAME}} {{.DEPS_CONDA_RUN}}"
    # status:
    #   - conda_pm list -n {{.VENV_NAME}}

  venv-update-pyinstaller-pydantic:
    cmds:
      - echo {{.TASK}}
      - |
        export SKIP_CYTHON=1 \
        && {{.conda_pm}}  run -n {{.VENV_NAME}} \
        pip install git+https://github.com/samuelcolvin/pydantic.git@v1.6.1

  venv-update-pip:
    cmds:
      - |
        {{.conda_pm}} run -n {{.VENV_NAME}} pip install -r {{.DEPS_PIP_PATH}}
    # status:
    #   - conda_pm run -n {{.VENV_NAME}} pip freeze

  test-exe-help: "{{.distpath}}/{{.exe_name}} --help | tee /dev/null"

  rebuild:
    - rm -rf __localbuild__/pyinstaller
    - task: build
    - task: test-exe-help

  cleanbuild:
    desc: validate deps before build
    cmds:
      - task: venv-ensure
      - task: rebuild

  build:
    desc: Demo of build with pyinstaller2
    target: "MX_PROJECT_PREFIX"
    cmds:
      - mkdir -p __localbuild__/pyinstaller
      # - |
      #   {{.VENV_RUN}} {{.MXPACK_EXE}} pyinstaller-build info-dump
      - |
        bash -c '
        source ~/.bashrc
        #conda activate {{.VENV_NAME}}
          pyinstaller pyinstaller.spec \
            --log-level=INFO \
            --onefile \
            --distpath {{.distpath}} \
            --workpath {{.workpath}}
        '
      # - |
      #   {{.VENV_RUN}} {{.MXPACK_EXE}} pyinstaller-build post-dump


